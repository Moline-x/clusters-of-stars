<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.mst</groupId>
        <artifactId>cluster-stars</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>cs-config</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>cs-config</name>

    <dependencies>
        <!-- 配置中心 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.0.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;镜像名称 &ndash;&gt;-->
<!--                    <imageName>cs/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;标签版本&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash;基础镜像，相当于Dockerfile里的from&ndash;&gt;-->
<!--                    <baseImage>adoptopenjdk/openjdk11-openj9:alpine-slim</baseImage>-->
<!--                    &lt;!&ndash;签名（作者）&ndash;&gt;-->
<!--                    <maintainer>molineting1231@gmail.com</maintainer>-->
<!--                    &lt;!&ndash;入口点，project.build.finalName就是project标签下的build标签下的filename标签内容，test-docker-demo&ndash;&gt;-->
<!--                    &lt;!&ndash;相当于启动容器后，会自动执行java -jar/xxx.jar&ndash;&gt;-->
<!--                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
<!--                    &lt;!&ndash;docker地址&ndash;&gt;-->
<!--                    <dockerHost>http://106.75.66.14:2375</dockerHost>-->

<!--                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash;复制的根目录，target&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash;把哪个文件上传到docker，相当于Dockerfile里的add xxx.jar /&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>
