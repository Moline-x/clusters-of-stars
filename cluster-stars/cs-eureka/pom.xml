<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.mst</groupId>
        <artifactId>cluster-stars</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>cs-eureka</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>cs-eureka</name>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>com.google.cloud.tools</groupId>-->
<!--                <artifactId>jib-maven-plugin</artifactId>-->
<!--                <version>1.3.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;from节点用来设置镜像的基础镜像，相当于Docerkfile中的FROM关键字&ndash;&gt;-->
<!--                    <from>-->
<!--                        &lt;!&ndash;使用openjdk官方镜像，tag是8-jdk-stretch，表示镜像的操作系统是debian9,装好了jdk8&ndash;&gt;-->
<!--                        <image>adoptopenjdk/openjdk11-openj9:alpine-slim</image>-->
<!--                    </from>-->
<!--                    <to>-->
<!--                        &lt;!&ndash;镜像名称和tag，使用了mvn内置变量${project.version}，表示当前工程的version&ndash;&gt;-->
<!--                        <image>cs/${project.artifactId}:${project.version}</image>-->
<!--                    </to>-->
<!--                    &lt;!&ndash;容器相关的属性&ndash;&gt;-->
<!--                    <container>-->
<!--                        &lt;!&ndash;要暴露的端口&ndash;&gt;-->
<!--                        <ports>-->
<!--                            <port>7001</port>-->
<!--                        </ports>-->
<!--                    </container>-->
<!--                </configuration>-->
<!--            </plugin>-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!--镜像名称 -->
                    <imageName>cs/${project.artifactId}</imageName>
                    <!--标签版本-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--基础镜像，相当于Dockerfile里的from-->
                    <baseImage>adoptopenjdk/openjdk11-openj9:alpine-slim</baseImage>
                    <!--签名（作者）-->
                    <maintainer>molineting1231@gmail.com</maintainer>
                    <!--入口点，project.build.finalName就是project标签下的build标签下的filename标签内容，test-docker-demo-->
                    <!--相当于启动容器后，会自动执行java -jar/xxx.jar-->
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <!--docker地址-->
                    <dockerHost>https://106.75.66.14:2375</dockerHost>
                    <dockerCertPath>E:\cluster-stars\dockerkeys</dockerCertPath>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--复制的根目录，target-->
                            <directory>${project.build.directory}</directory>
                            <!--把哪个文件上传到docker，相当于Dockerfile里的add xxx.jar /-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
